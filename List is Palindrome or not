// Check Linked list is Palindrome 
package LinkedList;

public class PalindromeList {
    class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public Node head;
    public Node tail;

    public void addNode(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = tail = newNode;
            return;
        }
        tail.next = newNode;
        tail = newNode;
    }

    public Node findMidNode(Node head) {
        Node slow = head;
        Node fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next; // +1
            fast = fast.next.next;// +2
        }
        return slow;
    }

    public boolean checkPalindrome() {
        if (head == null || head.next == null) {
            return true;
        }
        // Find the middle node
        Node midNode = findMidNode(head);
        // reverse mid helf node
        Node prev = null;
        Node curr = midNode;
        Node toward;
        while (curr != null) {
            toward = curr.next;
            curr.next = prev;
            prev = curr;
            curr = toward;
        }
        // check left node and right node value
        Node left = head;
        Node right = prev;
        while (right != null) {
            if (left.data != right.data) {
                return false;
            }
            left = left.next;
            right = right.next;
        }
        return true;

    }
    public static void main(String[] args) {
        PalindromeList ll = new PalindromeList();
        ll.addNode(1);
        ll.addNode(2);
        ll.addNode(2);
        ll.addNode(1);
        System.out.println(ll.checkPalindrome());
    }
}
